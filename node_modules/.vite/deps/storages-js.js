import "./chunk-AC2VUBZ6.js";

// node_modules/storages-js/src/common/Tools.js
var allModel = {
  local: {
    //localStorage缓存
    name: "local",
    get(key) {
      return localStorage.getItem(key);
    },
    set(key, value) {
      localStorage.setItem(key, value);
    },
    remove(key) {
      localStorage.removeItem(key);
    },
    keys() {
      return Object.keys(localStorage);
    }
  },
  session: {
    //sessionStorage缓存
    name: "session",
    get(key) {
      return sessionStorage.getItem(key);
    },
    set(key, value) {
      sessionStorage.setItem(key, value);
    },
    remove(key) {
      sessionStorage.removeItem(key);
    },
    keys() {
      return Object.keys(sessionStorage);
    }
  },
  uni: {
    //uniapp缓存
    name: "uni",
    get(key) {
      return uni.getStorageSync(key);
    },
    set(key, value) {
      uni.setStorageSync(key, value);
    },
    remove(key) {
      uni.removeStorageSync(key);
    },
    keys() {
      return uni.getStorageInfoSync().keys;
    }
  },
  wx: {
    //wx 微信小程序缓存
    name: "wx",
    get(key) {
      return wx.getStorageInfoSync.getItem(key);
    },
    set(key, value) {
      wx.setStorageInfoSync.setItem(key, value);
    },
    remove(key) {
      wx.removeStorageSync.removeItem(key);
    },
    keys() {
      return wx.getStorageInfoSync().keys;
    }
  }
};

// node_modules/storages-js/src/common/Storage.js
var Storage = class {
  constructor(key, value, model = {}) {
    this.key = key;
    this.value = value;
    this.model = model || {};
  }
  /**
   * 写入数据,保存自身(实时)
   * return void
   */
  save() {
    const { key, model, value } = this;
    const data = {
      value,
      type: typeof value,
      name: "storages-js"
    };
    try {
      model.set(key, JSON.stringify(data));
    } catch (error) {
      console.error(error);
    }
  }
  /**
   * 拿取数据(实时)
   * return void
   */
  take() {
    const { key, model } = this;
    let value = void 0;
    try {
      const data = JSON.parse(model.get(key));
      if (!data)
        throw "数据转换失败，或者数据已丢失";
      value = data.value;
    } catch (error) {
      console.error(error);
    }
    this.value = value;
  }
};

// node_modules/storages-js/src/index.js
var stateKey = Symbol("StateKey");
var StorageS = class {
  constructor(key, value, option = {}) {
    let {
      model,
      modelName,
      isRealTime = false,
      beforSet,
      //写入之前调用
      beforGet
      //获取之前调用
    } = option;
    {
      if (!key)
        throw `key不能为空`;
      if (!model) {
        model = allModel[modelName];
      }
      if (!model)
        throw `没有 ${modelName} 此模式。已有模式local,session,uni,wx`;
      if (typeof model !== "object")
        throw `没有找到储存模式对象`;
    }
    this._value_ = void 0;
    this.key = key;
    this.beforSet = beforSet;
    this.beforGet = beforGet;
    this.model = model;
    this[stateKey] = "active";
    this.isRealTime = isRealTime;
    this.storage = new Storage(
      //源数据
      key,
      value,
      model
    );
    {
      const isInit = model.get(key);
      if (!!isInit) {
        this.take();
      } else {
        this.setValue(value);
      }
    }
  }
  /**
   * 强制保存
   * return void
   */
  save() {
    this.checkState();
    this.storage.value = this._value_;
    this.storage.save();
  }
  /**
   * 拿取数据，保证数据的映射关系
   * return void
   */
  take() {
    this.checkState();
    this.storage.take();
    this._value_ = this.storage.value;
  }
  /**
   * 刷新实例，重新从缓存中获取数据
   * return void
   */
  refresh() {
    this.checkState();
    this.take();
  }
  /**
   * 销毁，清空
   * 该操作是清空该键所对应的数据
   * 如果该键有多个实例对象的话不建议使用
   * return void
   */
  destroy() {
    this[stateKey] = "destroy";
    this.model.remove(this.key);
  }
  /**
   * 获取所有keys
   */
  keys() {
    return this.model.keys();
  }
  /**
   * 检查状态
   * return void
   */
  checkState() {
    if (this[stateKey] !== "active") {
      throw `该实例已销毁，数据已被清空`;
    }
  }
  /**
   * 写入数据
   * return void
   */
  setValue(newValue) {
    this.checkState();
    if (typeof this.beforSet === "function") {
      newValue = this.beforSet(newValue);
    }
    this._value_ = newValue;
    this.save();
  }
  /**
   * 获取数据
   */
  getValue() {
    this.checkState();
    if (this.isRealTime) {
      this.take();
    }
    let value = this._value_;
    if (typeof this.beforGet === "function") {
      value = this.beforGet(value);
    }
    return value;
  }
  set value(newValue) {
    this.setValue(newValue);
  }
  get value() {
    return this.getValue();
  }
};

// node_modules/storages-js/index.js
var storages_js_default = StorageS;
export {
  storages_js_default as default
};
//# sourceMappingURL=storages-js.js.map
