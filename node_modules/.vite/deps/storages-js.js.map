{
  "version": 3,
  "sources": ["../../storages-js/src/common/Tools.js", "../../storages-js/src/common/Storage.js", "../../storages-js/src/index.js", "../../storages-js/index.js"],
  "sourcesContent": ["/**\r\n * 模式列表\r\n */\r\nexport const allModel = {\r\n    local:{  //localStorage缓存\r\n        name:'local',\r\n        get(key){\r\n            return localStorage.getItem(key);\r\n        },\r\n        set(key,value){\r\n            localStorage.setItem(key,value);\r\n        },\r\n        remove(key){\r\n            localStorage.removeItem(key);\r\n        },\r\n        keys(){\r\n            return Object.keys(localStorage);\r\n        },\r\n    },\r\n    session:{  //sessionStorage缓存\r\n        name:'session',\r\n        get(key){\r\n            return sessionStorage.getItem(key);\r\n        },\r\n        set(key,value){\r\n            sessionStorage.setItem(key,value);\r\n        },\r\n        remove(key){\r\n            sessionStorage.removeItem(key);\r\n        },\r\n        keys(){\r\n            return Object.keys(sessionStorage);\r\n        },\r\n    },\r\n    uni:{  //uniapp缓存\r\n        name:'uni',\r\n        get(key){\r\n            return uni.getStorageSync(key);\r\n        },\r\n        set(key,value){\r\n            uni.setStorageSync(key,value);\r\n        },\r\n        remove(key){\r\n            uni.removeStorageSync(key);\r\n        },\r\n        keys(){\r\n            return uni.getStorageInfoSync().keys;\r\n        },\r\n    },\r\n    wx:{  //wx 微信小程序缓存\r\n        name:'wx',\r\n        get(key){\r\n            return wx.getStorageInfoSync.getItem(key);\r\n        },\r\n        set(key,value){\r\n            wx.setStorageInfoSync.setItem(key,value);\r\n        },\r\n        remove(key){\r\n            wx.removeStorageSync.removeItem(key);\r\n        },\r\n        keys(){\r\n            return wx.getStorageInfoSync().keys;\r\n        },\r\n    },\r\n};", "/**\r\n * 基础本地缓存数据类\r\n * 处理本都数据的映射\r\n * 只关心数据的本地储存和取出\r\n * 都是实时的\r\n */\r\nexport default class Storage {\r\n    constructor(key,value,model={}){\r\n        this.key = key;\r\n        this.value = value;\r\n        this.model = model || {};\r\n    }\r\n    /**\r\n     * 写入数据,保存自身(实时)\r\n     * return void\r\n     */\r\n    save(){\r\n        const {key,model,value} = this;\r\n        const data = {\r\n            value:value,\r\n            type:typeof value,\r\n            name:'storages-js',\r\n        };\r\n        try {\r\n            model.set(key,JSON.stringify(data));\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n    /**\r\n     * 拿取数据(实时)\r\n     * return void\r\n     */\r\n    take(){  \r\n        const {key,model} = this;\r\n        let value = undefined;\r\n        try {\r\n            const data = JSON.parse(model.get(key));\r\n            if(!data) throw '数据转换失败，或者数据已丢失';\r\n            value = data.value;\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n        this.value = value;\r\n    }\r\n}", "import {allModel} from \"./common/Tools\";\r\nimport Storage from \"./common/Storage\";\r\n\r\n/**\r\n * 创建一个实例\r\n * @param  {String} key    存储键\r\n * @param  {[type]} value  初始值\r\n * @param  {Object} option 配置\r\n * option部分参数\r\n * model：自定义存储模式\r\n * modelName：存储模式名\r\n * isRealTime：实时性的\r\n */\r\nconst stateKey = Symbol('StateKey');  //状态键\r\nexport default class StorageS{\r\n    constructor(key,value,option={}){\r\n        let {\r\n            model,\r\n            modelName,\r\n            isRealTime=false,\r\n            beforSet,  //写入之前调用\r\n            beforGet,  //获取之前调用\r\n        } = option;\r\n        {\r\n            //参数验证\r\n            if(!key) throw `key不能为空`;\r\n            if(!model){  //优先使用自定义的mode\r\n                model = allModel[modelName];\r\n            }\r\n            if(!model) throw `没有 ${modelName} 此模式。已有模式local,session,uni,wx`;\r\n            if(typeof model !== 'object') throw `没有找到储存模式对象`;\r\n        }\r\n        this._value_ = undefined;  //用作数据转换\r\n        this.key = key;\r\n        this.beforSet = beforSet;\r\n        this.beforGet = beforGet;\r\n        this.model = model;\r\n        this[stateKey] = 'active';\r\n        this.isRealTime = isRealTime;\r\n        this.storage = new Storage( //源数据\r\n            key,\r\n            value,\r\n            model,\r\n        );\r\n        {\r\n            //数据初始化\r\n            const isInit = model.get(key);\r\n            if(!!isInit){  //表示已经初始化过了\r\n                this.take();\r\n            }else{\r\n                this.setValue(value);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 强制保存\r\n     * return void\r\n     */\r\n    save(){\r\n        this.checkState();\r\n        this.storage.value = this._value_;\r\n        this.storage.save();\r\n    }\r\n    /**\r\n     * 拿取数据，保证数据的映射关系\r\n     * return void\r\n     */\r\n    take(){\r\n        this.checkState();\r\n        this.storage.take();\r\n        this._value_ = this.storage.value;\r\n    }\r\n    /**\r\n     * 刷新实例，重新从缓存中获取数据\r\n     * return void\r\n     */\r\n    refresh(){\r\n        this.checkState();\r\n        this.take();\r\n    }\r\n    /**\r\n     * 销毁，清空\r\n     * 该操作是清空该键所对应的数据\r\n     * 如果该键有多个实例对象的话不建议使用\r\n     * return void\r\n     */\r\n    destroy(){\r\n        this[stateKey] = 'destroy';\r\n        this.model.remove(this.key);\r\n    }\r\n    /**\r\n     * 获取所有keys\r\n     */\r\n    keys(){ \r\n        return this.model.keys();\r\n    }\r\n    /**\r\n     * 检查状态\r\n     * return void\r\n     */\r\n    checkState(){  \r\n        if(this[stateKey] !== 'active'){\r\n            throw `该实例已销毁，数据已被清空`;\r\n        }\r\n    }\r\n    /**\r\n     * 写入数据\r\n     * return void\r\n     */\r\n    setValue(newValue){\r\n        this.checkState();\r\n        if(typeof this.beforSet === 'function'){\r\n            newValue = this.beforSet(newValue);\r\n        }\r\n        this._value_ = newValue;\r\n        this.save();\r\n    }\r\n    /**\r\n     * 获取数据\r\n     */\r\n    getValue(){\r\n        this.checkState();\r\n        if(this.isRealTime){  //是实时性的话每次访问就刷新一次，性能不是很好\r\n            this.take();\r\n        }\r\n        let value = this._value_;\r\n        if(typeof this.beforGet === 'function'){\r\n            value = this.beforGet(value);\r\n        }\r\n        return value;\r\n    }\r\n    set value(newValue){\r\n        this.setValue(newValue);\r\n    }\r\n    get value(){\r\n        return this.getValue();\r\n    }\r\n}\r\n/**\r\n * 测试例子\r\n * @type {String}\r\n */\r\n// new StorageS('test',undefined,{modelName:'local'});\r\n// new StorageS('test',0,{\r\n//     modelName:'local',\r\n//     beforSet(newValue){\r\n//         return newValue + 1;\r\n//     },\r\n//     beforGet(newValue){\r\n//         return newValue - 1;\r\n//     },\r\n// });", "/**\r\n * storages-js storage储存小工具\r\n * 不支持不能json序列化的数据存储\r\n * 支持的储存模式 local(默认) session uni(uniapp) wx(微信小程序)\r\n */\r\n\r\nimport StorageS from \"./src/index.js\";\r\nexport default StorageS;"],
  "mappings": "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",
  "names": []
}
